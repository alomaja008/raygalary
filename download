Here is a complete and secure PHP script to create a file download functionality. This script ensures proper handling of file downloads, including setting the correct headers and validating the file path.

PHP Download Script
<?php
// Secure file download script

// Function to handle file download
function downloadFile($filePath) {
    // Check if the file exists
    if (!file_exists($filePath)) {
        http_response_code(404); // Send a 404 Not Found response
        die("Error: File not found.");
    }

    // Get the file name and size
    $fileName = basename($filePath);
    $fileSize = filesize($filePath);

    // Set headers to force download
    header("Content-Description: File Transfer");
    header("Content-Type: application/octet-stream");
    header("Content-Disposition: attachment; filename=\"$fileName\"");
    header("Content-Length: $fileSize");
    header("Cache-Control: must-revalidate");
    header("Pragma: public");

    // Read and output the file
    readfile($filePath);
    exit;
}

// Example usage
// Replace 'path/to/your/file.txt' with the actual file path
$filePath = 'path/to/your/file.txt';
downloadFile($filePath);
?>


How It Works:


File Existence Check:

The script first checks if the file exists using file_exists(). If the file is missing, it sends a 404 Not Found response and terminates the script.



Headers for Download:

The header() function sets the appropriate HTTP headers to inform the browser that the file should be downloaded instead of displayed.
Content-Type: application/octet-stream ensures the file is treated as binary data.
Content-Disposition: attachment; filename="..." specifies the name of the file when downloaded.



File Output:

The readfile() function reads the file and sends its content to the browser.



Exit After Download:

The exit ensures the script stops execution after the file is sent.




Example Usage:

Save the script as download.php.
Place the file you want to make downloadable (e.g., example.txt) in the same directory or provide the correct path.
Access the script in your browser, e.g., http://yourdomain.com/download.php.


Security Tips:

Validate File Paths: Ensure the $filePath is sanitized to prevent directory traversal attacks.
Restrict Access: Use authentication or authorization to restrict access to the download script.
Hide Real Paths: Store files outside the web root and use a script to serve them.

Let me know if you need further assistance!
